name: ðŸš€ Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Auto-bump version if needed
      run: |
        # Get tag version and current version
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
        
        echo "Tag version: $TAG_VERSION"
        echo "Current version: $CURRENT_VERSION"
        
        # If versions don't match, auto-bump
        if [ "$TAG_VERSION" != "$CURRENT_VERSION" ]; then
          echo "ðŸ¤– Auto-bumping version from $CURRENT_VERSION to $TAG_VERSION"
          sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"$TAG_VERSION\"/" src/awsup/__init__.py
        else
          echo "âœ… Version already matches tag"
        fi
        
        # If tag version is same or older, auto-increment patch
        if [ "$(printf '%s\n' "$TAG_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" = "$TAG_VERSION" ] && [ "$TAG_VERSION" != "$CURRENT_VERSION" ]; then
          echo "ðŸ¤– Tag version is older, auto-incrementing patch..."
          IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          PATCH=${ADDR[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "ðŸ¤– Auto-bumping to $NEW_VERSION"
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/awsup/__init__.py
          
          # Update tag for consistency
          git tag -d $TAG_VERSION || true
          git tag v$NEW_VERSION
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        else
          echo "VERSION=$TAG_VERSION" >> $GITHUB_ENV
        fi
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*